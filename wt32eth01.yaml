substitutions:
  device_name: hot-tub-monitor
  friendly_name: "Hot Tub Monitor"
  description: "BlueRiiot Proxy"
  device_area: Patio
  board: nodemcu-32s

  #blueriiot_mac: 00:A0:50:56:xx:xx
  #blueriiot_nameprefix: mySwimingPool
  #blueriiot_idprefix: p1

  blueriiot_mac: !secret blueriiot_mac
  blueriiot_name_prefix: !secret blueriiot_nameprefix
  blueriiot_id_prefix: !secret blueriiot_idprefix
  
  # send true 0x01 to this service ID
  blueriiot_send_service_uuid: 'F3300001-F0A2-9B06-0C59-1BC4763B5C00'
  blueriiot_send_characteristic_uuid: 'F3300002-F0A2-9B06-0C59-1BC4763B5C00'
  
  # notification is recieved on this Service ID                  
  blueriiot_recieve_service_uuid: 'F3300001-F0A2-9B06-0C59-1BC4763B5C00'
  blueriiot_recieve_characteristic_uuid: 'F3300003-F0A2-9B06-0C59-1BC4763B5C00'

esphome:
  name: ${device_name}
  area: ${device_area}

esp32:
  board: ${board}
  framework:
    type: esp-idf
    #version: 5.1.2
    #version: latest
    # platform_version: 6.5.0
    #sdkconfig_options:
    #  COMPILER_OPTIMIZATION_SIZE: y  
    #  CONFIG_ESPTOOLPY_FLASHSIZE_4MB: y

# Enable logging
logger:
    level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
   - platform: esphome
     password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Hot-Tub-Monitor Fallback Hotspot"
    password: !secret fallback_wifi_password

captive_portal:


#====================

esp32_ble_tracker:
  scan_parameters:
    active: false
    interval: 1000ms
    window: 700ms
  on_ble_advertise:
    - mac_address: ${blueriiot_mac}
      then:
        - logger.log: 
            format: "Found Blueriiot sensor"
            level: "DEBUG"

ble_client:
  - mac_address: ${blueriiot_mac}
    id: ble_client_${blueriiot_id_prefix}
    on_connect: 
      then:
        - lambda: "id(binary_sensor_${blueriiot_id_prefix}_connected).publish_state(true);"
        - delay: 2s
        - button.press: button_${blueriiot_id_prefix}_doreading
    on_disconnect: [lambda: "id(binary_sensor_${blueriiot_id_prefix}_connected).publish_state(false);"]

# ----------
## Blue Connect
button:
  - platform: template
    id: button_${blueriiot_id_prefix}_doreading
    name: ${blueriiot_name_prefix} do reading
    internal: true
    on_press:
      then:
        - ble_client.ble_write:
            id: ble_client_${blueriiot_id_prefix}
            service_uuid: ${blueriiot_send_service_uuid}
            characteristic_uuid: ${blueriiot_send_characteristic_uuid}
            # A lambda returning an std::vector<uint8_t>.
            value: !lambda |-
              return {0x01};
##
switch:
  - platform: ble_client
    ble_client_id: ble_client_${blueriiot_id_prefix}
    name: "${blueriiot_name_prefix} Enable"
    id: switch_${blueriiot_id_prefix}_enable
    restore_mode: ALWAYS_OFF
#              
binary_sensor:  
  - platform: template
    id: binary_sensor_${blueriiot_id_prefix}_connected
    name: ${blueriiot_name_prefix} Status
    device_class: connectivity
    entity_category: diagnostic

  - platform: status
    id: binary_sensor_${blueriiot_id_prefix}_ph
    name: ${blueriiot_name_prefix} pH Status
    # device_class: connectivity
    # entity_category: diagnostic
  
  - platform: status
    id: binary_sensor_${blueriiot_id_prefix}_orp
    name: ${blueriiot_name_prefix} Bromine Concentration
    # device_class: connectivity
    # entity_category: diagnostic
      
sensor: 
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_temperature
    name: ${blueriiot_name_prefix} Temperature
    # Optional variables:
    unit_of_measurement: "Â°C"
    icon: mdi:thermometer-water
    device_class: "temperature"
    state_class: "measurement"
    accuracy_decimals: 1
  
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_ph
    name: ${blueriiot_name_prefix} pH
    unit_of_measurement: "pH"
    icon: mdi:ph
    state_class: "measurement"
    device_class: "PH"
    accuracy_decimals: 1
    on_value_range: 
      - below: 7.29
        then:
          - binary_sensor.template.publish:
              id: binary_sensor_${blueriiot_id_prefix}_ph
              state: OFF
      - above: 7.61
        then:
          - binary_sensor.template.publish:
              id: binary_sensor_${blueriiot_id_prefix}_ph
              state: OFF
      - above: 7.3
        below: 7.6
        then:
          - binary_sensor.template.publish:
              id: binary_sensor_${blueriiot_id_prefix}_ph
              state: ON
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_orp
    name: ${blueriiot_name_prefix} Bromine
    unit_of_measurement: "mV"
    icon: mdi:biohazard
    device_class: "voltage"
    state_class: "measurement"
    accuracy_decimals: 1
    on_value_range:
      - below: 649
        then:
          - binary_sensor.template.publish:
              id: binary_sensor_${blueriiot_id_prefix}_orp
              state: OFF
      - above: 900
        then:
          - binary_sensor.template.publish:
              id: binary_sensor_${blueriiot_id_prefix}_orp
              state: OFF
      - above: 650
        below: 899
        then:
          - binary_sensor.template.publish:
              id: binary_sensor_${blueriiot_id_prefix}_orp
              state: ON
  - platform: template 
    id: sensor_${blueriiot_id_prefix}_bat
    name: ${blueriiot_name_prefix} Battery
    # Optional variables:
    unit_of_measurement: "%"
    icon: mdi:battery-bluetooth-variant
    device_class: "BATTERY"
    state_class: "measurement"
    accuracy_decimals: 0
    
text_sensor:
  - platform: template
    name: Blueriiot last update
    id: uptime_blueriiot
    update_interval: never
    icon: mdi:clock-start
  - platform: ble_client
    id: ${blueriiot_id_prefix}_reading_data
    name: ${blueriiot_name_prefix} reading data
    internal: true
    ble_client_id: ble_client_${blueriiot_id_prefix}
    service_uuid: ${blueriiot_recieve_service_uuid}
    characteristic_uuid: ${blueriiot_recieve_characteristic_uuid}
    notify: true
    update_interval: never
    on_notify:
      then:
        - lambda: |-
            std::string rawhex = format_hex_pretty((uint8_t *) x.c_str(), x.size()).c_str();
            ESP_LOGD("raw_hex", "%s", rawhex.c_str());

            float temperature = (float)((int16_t)(x[2]<< 8) + x[1])/100;
            ESP_LOGD("temp", "%f", temperature);
            id(sensor_${blueriiot_id_prefix}_temperature).publish_state(temperature);
                
            float raw_ph = (float)( (int16_t) (x[4]<< 8) + x[3]) ;
            float ph = (float)( (int16_t) (2048 - raw_ph)) / 232  + 7 ; 
            ESP_LOGD("ph", "%f", ph);
            id(sensor_${blueriiot_id_prefix}_ph).publish_state(ph);
            
            float orp = (float)( (int16_t) (x[6]<< 8) + x[5]) / 3.86  - 21.57826;
            ESP_LOGD("orp", "%f", orp);
            id(sensor_${blueriiot_id_prefix}_orp).publish_state(orp);
            
            float bat = (float)( (int16_t) x[11]) / 36 * 100;
            ESP_LOGD("bat", "%f", bat);
            id(sensor_${blueriiot_id_prefix}_bat).publish_state(bat);
            
            id(switch_${blueriiot_id_prefix}_enable).turn_off();